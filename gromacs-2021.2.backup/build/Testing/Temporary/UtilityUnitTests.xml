<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="373" failures="0" disabled="0" errors="0" timestamp="2021-05-17T14:23:05" time="0.006" name="AllTests">
  <testsuite name="AllocatorTest/0" tests="5" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/0" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0.001" classname="AllocatorTest/0" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/0" />
    <testcase name="Move" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/0" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/0" />
  </testsuite>
  <testsuite name="AllocatorTest/1" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/1" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/1" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/1" />
    <testcase name="Move" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/1" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/1" />
  </testsuite>
  <testsuite name="AllocatorTest/2" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
    <testcase name="Move" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
  </testsuite>
  <testsuite name="AllocatorTest/3" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
    <testcase name="Move" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
  </testsuite>
  <testsuite name="AllocatorTest/4" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
    <testcase name="Move" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
  </testsuite>
  <testsuite name="AllocatorTest/5" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
    <testcase name="Move" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
  </testsuite>
  <testsuite name="AllocatorUntypedTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="Comparison" status="run" time="0" classname="AllocatorUntypedTest" />
  </testsuite>
  <testsuite name="EmptyArrayRefTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IsEmpty" status="run" time="0" classname="EmptyArrayRefTest" />
  </testsuite>
  <testsuite name="EmptyConstArrayRefTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IsEmpty" status="run" time="0" classname="EmptyConstArrayRefTest" />
  </testsuite>
  <testsuite name="ArrayRefTest/0" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
  </testsuite>
  <testsuite name="ArrayRefTest/1" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
  </testsuite>
  <testsuite name="ArrayRefTest/2" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
  </testsuite>
  <testsuite name="ArrayRefTest/3" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
  </testsuite>
  <testsuite name="ArrayRefTest/4" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
  </testsuite>
  <testsuite name="ArrayRefTest/5" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
  </testsuite>
  <testsuite name="ArrayRefTest/6" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
  </testsuite>
  <testsuite name="ArrayRefTest/7" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
  </testsuite>
  <testsuite name="ArrayRefTest/8" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
  </testsuite>
  <testsuite name="ArrayRefTest/9" tests="9" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
  </testsuite>
  <testsuite name="ArrayRefTest/10" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
  </testsuite>
  <testsuite name="ArrayRefTest/11" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
  </testsuite>
  <testsuite name="ArrayRefTest/12" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
  </testsuite>
  <testsuite name="ArrayRefTest/13" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
  </testsuite>
  <testsuite name="ArrayRefTest/14" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
  </testsuite>
  <testsuite name="ArrayRefTest/15" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
  </testsuite>
  <testsuite name="ArrayRefTest/16" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
  </testsuite>
  <testsuite name="ArrayRefTest/17" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
  </testsuite>
  <testsuite name="ArrayRefTest/18" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
  </testsuite>
  <testsuite name="ArrayRefTest/19" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
  </testsuite>
  <testsuite name="CStringUtilityTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CaseInsensitiveComparison" status="run" time="0" classname="CStringUtilityTest" />
    <testcase name="CaseInsensitiveComparisonInLength" status="run" time="0" classname="CStringUtilityTest" />
  </testsuite>
  <testsuite name="DefaultInitializationAllocator" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="PerformsValueInitialization" status="run" time="0" classname="DefaultInitializationAllocator" />
    <testcase name="PerformsNoInitialization" status="run" time="0" classname="DefaultInitializationAllocator" />
  </testsuite>
  <testsuite name="EnumerationHelpersTest" tests="4" failures="0" disabled="0" errors="0" time="0">
    <testcase name="EnumerationWrapperWorks" status="run" time="0" classname="EnumerationHelpersTest" />
    <testcase name="EnumerationArrayWorks" status="run" time="0" classname="EnumerationHelpersTest" />
    <testcase name="EnumerationArrayCountIsSafe" status="run" time="0" classname="EnumerationHelpersTest" />
    <testcase name="ArrayRefOfEnumerationArrayWorks" status="run" time="0" classname="EnumerationHelpersTest" />
  </testsuite>
  <testsuite name="FixedCapacityVectorTest" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IsEmpty" status="run" time="0" classname="FixedCapacityVectorTest" />
    <testcase name="PushWorks" status="run" time="0" classname="FixedCapacityVectorTest" />
    <testcase name="PopWorks" status="run" time="0" classname="FixedCapacityVectorTest" />
    <testcase name="ClearWorks" status="run" time="0" classname="FixedCapacityVectorTest" />
    <testcase name="EmplaceBackWorks" status="run" time="0" classname="FixedCapacityVectorTest" />
    <testcase name="AtThrows" status="run" time="0" classname="FixedCapacityVectorTest" />
    <testcase name="IteratorWorks" status="run" time="0" classname="FixedCapacityVectorTest" />
    <testcase name="ReverseIteratorWorks" status="run" time="0" classname="FixedCapacityVectorTest" />
    <testcase name="ZeroCapacityWorks" status="run" time="0" classname="FixedCapacityVectorTest" />
  </testsuite>
  <testsuite name="InMemorySerializerTest" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="Roundtrip" status="run" time="0" classname="InMemorySerializerTest" />
    <testcase name="RoundtripWithEndianessSwap" status="run" time="0" classname="InMemorySerializerTest" />
    <testcase name="SerializerExplicitEndianessSwap" status="run" time="0" classname="InMemorySerializerTest" />
    <testcase name="DeserializerExplicitEndianessSwap" status="run" time="0" classname="InMemorySerializerTest" />
    <testcase name="SizeIsCorrect" status="run" time="0" classname="InMemorySerializerTest" />
  </testsuite>
  <testsuite name="KeyValueTreeSerializerTest" tests="4" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="EmptyTree" status="run" time="0" classname="KeyValueTreeSerializerTest" />
    <testcase name="SimpleObject" status="run" time="0" classname="KeyValueTreeSerializerTest" />
    <testcase name="ObjectWithArrays" status="run" time="0" classname="KeyValueTreeSerializerTest" />
    <testcase name="ObjectWithObjects" status="run" time="0.001" classname="KeyValueTreeSerializerTest" />
  </testsuite>
  <testsuite name="TreeValueTransformTest" tests="6" failures="0" disabled="0" errors="0" time="0">
    <testcase name="SimpleTransforms" status="run" time="0" classname="TreeValueTransformTest" />
    <testcase name="SimpleTransformsCaseAndDashInsensitive" status="run" time="0" classname="TreeValueTransformTest" />
    <testcase name="SimpleTransformsToObject" status="run" time="0" classname="TreeValueTransformTest" />
    <testcase name="ObjectFromString" status="run" time="0" classname="TreeValueTransformTest" />
    <testcase name="ObjectFromMultipleStrings" status="run" time="0" classname="TreeValueTransformTest" />
    <testcase name="ScopedTransformRules" status="run" time="0" classname="TreeValueTransformTest" />
  </testsuite>
  <testsuite name="TreeValueTransformErrorTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="ConversionError" status="run" time="0" classname="TreeValueTransformErrorTest" />
  </testsuite>
  <testsuite name="ListOfLists" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="EmptyListOfListsWorks" status="run" time="0" classname="ListOfLists" />
    <testcase name="AppendWorks" status="run" time="0" classname="ListOfLists" />
    <testcase name="EmptyListWorks" status="run" time="0" classname="ListOfLists" />
    <testcase name="AppendAccessWorks" status="run" time="0" classname="ListOfLists" />
    <testcase name="ClearWorks" status="run" time="0" classname="ListOfLists" />
    <testcase name="OutOfRangeAccessThrows" status="run" time="0" classname="ListOfLists" />
    <testcase name="FrontAndBackWork" status="run" time="0" classname="ListOfLists" />
    <testcase name="ExtractsAndRestores" status="run" time="0" classname="ListOfLists" />
    <testcase name="AppendsListOfListsWithOffset" status="run" time="0" classname="ListOfLists" />
  </testsuite>
  <testsuite name="LoggerTest" tests="7" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="EmptyLoggerWorks" status="run" time="0" classname="LoggerTest" />
    <testcase name="LogsToStream" status="run" time="0" classname="LoggerTest" />
    <testcase name="LogsToFile" status="run" time="0.001" classname="LoggerTest" />
    <testcase name="LevelFilteringWorks" status="run" time="0" classname="LoggerTest" />
    <testcase name="LogsToMultipleStreams" status="run" time="0" classname="LoggerTest" />
    <testcase name="LogsToMultipleFiles" status="run" time="0" classname="LoggerTest" />
    <testcase name="LogsToStreamAndFile" status="run" time="0" classname="LoggerTest" />
  </testsuite>
  <testsuite name="MDModuleNotificationTest" tests="4" failures="0" disabled="0" errors="0" time="0">
    <testcase name="addConsumer" status="run" time="0" classname="MDModuleNotificationTest" />
    <testcase name="addConsumerWithPointerParameter" status="run" time="0" classname="MDModuleNotificationTest" />
    <testcase name="addTwoDifferentConsumers" status="run" time="0" classname="MDModuleNotificationTest" />
    <testcase name="consumerOfTwoResources" status="run" time="0" classname="MDModuleNotificationTest" />
  </testsuite>
  <testsuite name="MutexBasicTest" tests="4" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CanBeMade" status="run" time="0" classname="MutexBasicTest" />
    <testcase name="CanBeLocked" status="run" time="0" classname="MutexBasicTest" />
    <testcase name="CanBeTryLocked" status="run" time="0" classname="MutexBasicTest" />
    <testcase name="CanBeUsedInLockGuard" status="run" time="0" classname="MutexBasicTest" />
  </testsuite>
  <testsuite name="MutexTaskTest" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MutualExclusionWorksWithLock" status="run" time="0" classname="MutexTaskTest" />
    <testcase name="MutualExclusionWorksWithTryLockOnOtherThread" status="run" time="0" classname="MutexTaskTest" />
    <testcase name="MutualExclusionWorksWithTryLockOnSameThread" status="run" time="0" classname="MutexTaskTest" />
  </testsuite>
  <testsuite name="PathTest" tests="2" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="StripSourcePrefixWorks" status="run" time="0" classname="PathTest" />
    <testcase name="SearchOperationsWork" status="run" time="0.001" classname="PathTest" />
  </testsuite>
  <testsuite name="PhysicalNodeCommunicatorTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CanConstruct" status="run" time="0" classname="PhysicalNodeCommunicatorTest" />
    <testcase name="CanCallBarrier" status="run" time="0" classname="PhysicalNodeCommunicatorTest" />
  </testsuite>
  <testsuite name="Range" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="EmptyRangeWorks" status="run" time="0" classname="Range" />
    <testcase name="NonEmptyRangeWorks" status="run" time="0" classname="Range" />
    <testcase name="BeginEnd" status="run" time="0" classname="Range" />
    <testcase name="IsInRangeWorks" status="run" time="0" classname="Range" />
    <testcase name="IteratorWorks" status="run" time="0" classname="Range" />
  </testsuite>
  <testsuite name="StringConvert" tests="7" failures="0" disabled="0" errors="0" time="0">
    <testcase name="NoResultFromEptyString" status="run" time="0" classname="StringConvert" />
    <testcase name="ThreeFloatsSuccessfully" status="run" time="0" classname="StringConvert" />
    <testcase name="OneIntSucessfully" status="run" time="0" classname="StringConvert" />
    <testcase name="FloatAsStringToIntArrayThrows" status="run" time="0" classname="StringConvert" />
    <testcase name="ThrowsWhenWrongSize" status="run" time="0" classname="StringConvert" />
    <testcase name="StringIdentityTransformWithArrayThrows" status="run" time="0" classname="StringConvert" />
    <testcase name="StringIdentityTransformWithArrayOkay" status="run" time="0" classname="StringConvert" />
  </testsuite>
  <testsuite name="StringUtilityTest" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="StartsWith" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="EndsWith" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="StripSuffixIfPresent" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="StripString" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="SplitString" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="SplitDelimitedString" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="SplitAndTrimDelimitedString" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="CanCompareCaseInsensitive" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="CanCompareCaseInsensitiveInLength" status="run" time="0" classname="StringUtilityTest" />
  </testsuite>
  <testsuite name="FormatStringTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="HandlesBasicFormatting" status="run" time="0" classname="FormatStringTest" />
    <testcase name="HandlesLongStrings" status="run" time="0" classname="FormatStringTest" />
  </testsuite>
  <testsuite name="StringFormatterTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="HandlesBasicFormatting" status="run" time="0" classname="StringFormatterTest" />
  </testsuite>
  <testsuite name="formatAndJoinTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="Works" status="run" time="0" classname="formatAndJoinTest" />
  </testsuite>
  <testsuite name="JoinStringsTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="Works" status="run" time="0" classname="JoinStringsTest" />
  </testsuite>
  <testsuite name="ReplaceAllTest" tests="6" failures="0" disabled="0" errors="0" time="0">
    <testcase name="HandlesEmptyStrings" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesNoMatches" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesMatchesAtEnds" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesMultipleMatches" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesWordBoundaries" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesPossibleRecursiveMatches" status="run" time="0" classname="ReplaceAllTest" />
  </testsuite>
  <testsuite name="TextLineWrapperTest" tests="10" failures="0" disabled="0" errors="0" time="0">
    <testcase name="HandlesEmptyStrings" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesTrailingWhitespace" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesTrailingNewlines" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="WrapsCorrectly" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="WrapsCorrectlyWithExistingBreaks" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesIndent" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesIndentWithEmptyLines" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesHangingIndent" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesContinuationCharacter" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="WrapsCorrectlyWithExtraWhitespace" status="run" time="0" classname="TextLineWrapperTest" />
  </testsuite>
  <testsuite name="TemplateMPTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DispatchTemplatedFunction" status="run" time="0" classname="TemplateMPTest" />
  </testsuite>
  <testsuite name="TextWriterTest" tests="6" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="WritesLines" status="run" time="0" classname="TextWriterTest" />
    <testcase name="WritesLinesInParts" status="run" time="0" classname="TextWriterTest" />
    <testcase name="WritesWrappedLines" status="run" time="0.001" classname="TextWriterTest" />
    <testcase name="WritesLinesInPartsWithWrapper" status="run" time="0" classname="TextWriterTest" />
    <testcase name="TracksNewlines" status="run" time="0" classname="TextWriterTest" />
    <testcase name="PreservesTrailingWhitespace" status="run" time="0" classname="TextWriterTest" />
  </testsuite>
  <testsuite name="TypeTraitsTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IsIntegralConstant" status="run" time="0" classname="TypeTraitsTest" />
  </testsuite>
  <testsuite name="BitmaskTest32_11/BitmaskTest32" tests="6" failures="0" disabled="0" errors="0" time="0">
    <testcase name="SetAndClear/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="InitBit/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="InitLowBits/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="Disjoint/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="Union/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="ToHex/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
  </testsuite>
  <testsuite name="BitmaskTest64_10_42/BitmaskTest64" tests="12" failures="0" disabled="0" errors="0" time="0">
    <testcase name="SetAndClear/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="SetAndClear/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="InitBit/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="InitBit/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="InitLowBits/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="InitLowBits/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="Disjoint/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="Disjoint/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="Union/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="Union/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="ToHex/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="ToHex/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
  </testsuite>
  <testsuite name="BitmaskTest128_9_78/BitmaskTest128" tests="12" failures="0" disabled="0" errors="0" time="0">
    <testcase name="SetAndClear/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="SetAndClear/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="InitBit/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="InitBit/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="InitLowBits/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="InitLowBits/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="Disjoint/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="Disjoint/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="Union/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="Union/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="ToHex/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="ToHex/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
  </testsuite>
  <testsuite name="WithAndWithoutMutex/DifferentTasksTest" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="StdAsyncWorksWithDefaultPolicy/0" value_param="32-byte object &lt;20-EB 38-3E E4-55 00-00 00-00 00-00 00-00 00-00 00-57 39-3E E4-55 00-00 F0-56 39-3E E4-55 00-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDefaultPolicy/1" value_param="32-byte object &lt;10-08 39-3E E4-55 00-00 00-00 00-00 00-00 00-00 00-57 39-3E E4-55 00-00 F0-56 39-3E E4-55 00-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDefaultPolicy/2" value_param="32-byte object &lt;B0-09 39-3E E4-55 00-00 00-00 00-00 00-00 00-00 00-57 39-3E E4-55 00-00 F0-56 39-3E E4-55 00-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithAsyncLaunchPolicy/0" value_param="32-byte object &lt;20-EB 38-3E E4-55 00-00 00-00 00-00 00-00 00-00 00-57 39-3E E4-55 00-00 F0-56 39-3E E4-55 00-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithAsyncLaunchPolicy/1" value_param="32-byte object &lt;10-08 39-3E E4-55 00-00 00-00 00-00 00-00 00-00 00-57 39-3E E4-55 00-00 F0-56 39-3E E4-55 00-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithAsyncLaunchPolicy/2" value_param="32-byte object &lt;B0-09 39-3E E4-55 00-00 00-00 00-00 00-00 00-00 00-57 39-3E E4-55 00-00 F0-56 39-3E E4-55 00-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDeferredLaunchPolicy/0" value_param="32-byte object &lt;20-EB 38-3E E4-55 00-00 00-00 00-00 00-00 00-00 00-57 39-3E E4-55 00-00 F0-56 39-3E E4-55 00-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDeferredLaunchPolicy/1" value_param="32-byte object &lt;10-08 39-3E E4-55 00-00 00-00 00-00 00-00 00-00 00-57 39-3E E4-55 00-00 F0-56 39-3E E4-55 00-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDeferredLaunchPolicy/2" value_param="32-byte object &lt;B0-09 39-3E E4-55 00-00 00-00 00-00 00-00 00-00 00-57 39-3E E4-55 00-00 F0-56 39-3E E4-55 00-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
  </testsuite>
  <testsuite name="ParsesLinesDifferently/TextReaderTest" tests="7" failures="0" disabled="0" errors="0" time="0">
    <testcase name="UsingDifferentConfigurations/0" value_param="56-byte object &lt;10-66 70-3E E4-55 00-00 D0-67 70-3E E4-55 00-00 D0-67 70-3E E4-55 00-00 80-DC 3B-3E E4-55 00-00 90-68 70-3E E4-55 00-00 50-6A 70-3E E4-55 00-00 50-6A 70-3E E4-55 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/1" value_param="56-byte object &lt;A0-A4 70-3E E4-55 00-00 60-A6 70-3E E4-55 00-00 60-A6 70-3E E4-55 00-00 E0-DC 3B-3E E4-55 00-00 80-A7 70-3E E4-55 00-00 40-A9 70-3E E4-55 00-00 40-A9 70-3E E4-55 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/2" value_param="56-byte object &lt;90-8B 70-3E E4-55 00-00 50-8D 70-3E E4-55 00-00 50-8D 70-3E E4-55 00-00 F0-DC 3B-3E E4-55 00-00 70-8E 70-3E E4-55 00-00 30-90 70-3E E4-55 00-00 30-90 70-3E E4-55 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/3" value_param="56-byte object &lt;A0-4E 70-3E E4-55 00-00 60-50 70-3E E4-55 00-00 60-50 70-3E E4-55 00-00 00-DD 3B-3E E4-55 00-00 10-51 70-3E E4-55 00-00 D0-52 70-3E E4-55 00-00 D0-52 70-3E E4-55 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/4" value_param="56-byte object &lt;90-68 70-3E E4-55 00-00 50-6A 70-3E E4-55 00-00 50-6A 70-3E E4-55 00-00 20-DD 3B-3E E4-55 00-00 A0-6A 70-3E E4-55 00-00 60-6C 70-3E E4-55 00-00 60-6C 70-3E E4-55 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/5" value_param="56-byte object &lt;90-93 70-3E E4-55 00-00 50-95 70-3E E4-55 00-00 50-95 70-3E E4-55 00-00 B0-DE 3B-3E E4-55 00-00 10-96 70-3E E4-55 00-00 D0-97 70-3E E4-55 00-00 D0-97 70-3E E4-55 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/6" value_param="56-byte object &lt;70-42 70-3E E4-55 00-00 30-44 70-3E E4-55 00-00 30-44 70-3E E4-55 00-00 E0-DE 3B-3E E4-55 00-00 A0-4E 70-3E E4-55 00-00 60-50 70-3E E4-55 00-00 60-50 70-3E E4-55 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
  </testsuite>
</testsuites>

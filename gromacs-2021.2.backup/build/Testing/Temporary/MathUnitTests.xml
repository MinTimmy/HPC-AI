<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="292" failures="0" disabled="0" errors="0" timestamp="2021-05-17T14:23:05" time="0.052" name="AllTests">
  <testsuite name="EmptyArrayRefWithPaddingTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IsEmpty" status="run" time="0" classname="EmptyArrayRefWithPaddingTest" />
  </testsuite>
  <testsuite name="EmptyConstArrayRefWithPaddingTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IsEmpty" status="run" time="0" classname="EmptyConstArrayRefWithPaddingTest" />
  </testsuite>
  <testsuite name="ArrayRefWithPaddingTest/0" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AssignFromPaddedVectorWorks" type_param="gmx::ArrayRefWithPadding&lt;int&gt;" status="run" time="0" classname="ArrayRefWithPaddingTest/0" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRefWithPadding&lt;int&gt;" status="run" time="0" classname="ArrayRefWithPaddingTest/0" />
  </testsuite>
  <testsuite name="ArrayRefWithPaddingTest/1" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AssignFromPaddedVectorWorks" type_param="gmx::ArrayRefWithPadding&lt;float&gt;" status="run" time="0" classname="ArrayRefWithPaddingTest/1" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRefWithPadding&lt;float&gt;" status="run" time="0" classname="ArrayRefWithPaddingTest/1" />
  </testsuite>
  <testsuite name="ArrayRefWithPaddingTest/2" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AssignFromPaddedVectorWorks" type_param="gmx::ArrayRefWithPadding&lt;double&gt;" status="run" time="0" classname="ArrayRefWithPaddingTest/2" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRefWithPadding&lt;double&gt;" status="run" time="0" classname="ArrayRefWithPaddingTest/2" />
  </testsuite>
  <testsuite name="TranslateAndScaleTest" tests="11" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="identityTransformation" status="run" time="0" classname="TranslateAndScaleTest" />
    <testcase name="translationWithIdentityScaling" status="run" time="0" classname="TranslateAndScaleTest" />
    <testcase name="scalingWithZeroTranslation" status="run" time="0" classname="TranslateAndScaleTest" />
    <testcase name="translationAndScalingNonTrivial" status="run" time="0" classname="TranslateAndScaleTest" />
    <testcase name="translationAndScalingNonTrivialSingeVector" status="run" time="0" classname="TranslateAndScaleTest" />
    <testcase name="scalingIdentity" status="run" time="0.001" classname="TranslateAndScaleTest" />
    <testcase name="scalingNonTrivial" status="run" time="0" classname="TranslateAndScaleTest" />
    <testcase name="scalingNonTrivialSingleVector" status="run" time="0" classname="TranslateAndScaleTest" />
    <testcase name="scalingInverseNoZero" status="run" time="0" classname="TranslateAndScaleTest" />
    <testcase name="scalingInverseWithOneScaleDimensionZero" status="run" time="0" classname="TranslateAndScaleTest" />
    <testcase name="scalingInverseWithOneScaleDimensionZeroSingleVector" status="run" time="0" classname="TranslateAndScaleTest" />
  </testsuite>
  <testsuite name="AffineTransformationTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="identityTransformYieldsSameVectors" status="run" time="0" classname="AffineTransformationTest" />
    <testcase name="applyTransformationToVectors" status="run" time="0" classname="AffineTransformationTest" />
  </testsuite>
  <testsuite name="DensitySimilarityTest" tests="12" failures="0" disabled="0" errors="0" time="0.035">
    <testcase name="InnerProductIsCorrect" status="run" time="0" classname="DensitySimilarityTest" />
    <testcase name="InnerProductGradientIsCorrect" status="run" time="0" classname="DensitySimilarityTest" />
    <testcase name="GradientThrowsIfDensitiesDontMatch" status="run" time="0" classname="DensitySimilarityTest" />
    <testcase name="SimilarityThrowsIfDensitiesDontMatch" status="run" time="0" classname="DensitySimilarityTest" />
    <testcase name="CopiedMeasureInnerProductIsCorrect" status="run" time="0" classname="DensitySimilarityTest" />
    <testcase name="RelativeEntropyOfSameDensityIsZero" status="run" time="0" classname="DensitySimilarityTest" />
    <testcase name="RelativeEntropyIsCorrect" status="run" time="0" classname="DensitySimilarityTest" />
    <testcase name="RelativeEntropyGradientIsCorrect" status="run" time="0" classname="DensitySimilarityTest" />
    <testcase name="CrossCorrelationIsOne" status="run" time="0.012" classname="DensitySimilarityTest" />
    <testcase name="CrossCorrelationIsMinusOneWhenAntiCorrelated" status="run" time="0.013" classname="DensitySimilarityTest" />
    <testcase name="CrossCorrelationGradientIsZeroWhenCorrelated" status="run" time="0.01" classname="DensitySimilarityTest" />
    <testcase name="CrossCorrelationGradientIsCorrect" status="run" time="0" classname="DensitySimilarityTest" />
  </testsuite>
  <testsuite name="StructureSimilarityTest" tests="6" failures="0" disabled="0" errors="0" time="0">
    <testcase name="StructureComparedToSelfHasZeroRMSD" status="run" time="0" classname="StructureSimilarityTest" />
    <testcase name="StructureComparedToSelfHasZeroRho" status="run" time="0" classname="StructureSimilarityTest" />
    <testcase name="YieldsCorrectRMSD" status="run" time="0" classname="StructureSimilarityTest" />
    <testcase name="YieldsCorrectRho" status="run" time="0" classname="StructureSimilarityTest" />
    <testcase name="YieldsCorrectRMSDWithIndex" status="run" time="0" classname="StructureSimilarityTest" />
    <testcase name="YieldsCorrectRhoWidthIndex" status="run" time="0" classname="StructureSimilarityTest" />
  </testsuite>
  <testsuite name="ExponentialMovingAverage" tests="8" failures="0" disabled="0" errors="0" time="0">
    <testcase name="ThrowsWhenLagTimeIsZero" status="run" time="0" classname="ExponentialMovingAverage" />
    <testcase name="ThrowsWhenLagTimeIsNegative" status="run" time="0" classname="ExponentialMovingAverage" />
    <testcase name="LagTimeOneYieldsInstantaneousValue" status="run" time="0" classname="ExponentialMovingAverage" />
    <testcase name="YieldsCorrectValue" status="run" time="0" classname="ExponentialMovingAverage" />
    <testcase name="SetAverageCorrectly" status="run" time="0" classname="ExponentialMovingAverage" />
    <testcase name="DeterminesCorrectlyIfIncreasing" status="run" time="0" classname="ExponentialMovingAverage" />
    <testcase name="InverseLagTimeCorrect" status="run" time="0" classname="ExponentialMovingAverage" />
    <testcase name="RoundTripAsKeyValueTree" status="run" time="0" classname="ExponentialMovingAverage" />
  </testsuite>
  <testsuite name="FunctionTest" tests="21" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="StaticLog2" status="run" time="0.001" classname="FunctionTest" />
    <testcase name="Log2I32Bit" status="run" time="0" classname="FunctionTest" />
    <testcase name="Log2I64Bit" status="run" time="0" classname="FunctionTest" />
    <testcase name="GreatestCommonDivisor" status="run" time="0" classname="FunctionTest" />
    <testcase name="InvsqrtFloat" status="run" time="0" classname="FunctionTest" />
    <testcase name="InvsqrtDouble" status="run" time="0" classname="FunctionTest" />
    <testcase name="InvsqrtInteger" status="run" time="0" classname="FunctionTest" />
    <testcase name="InvcbrtFloat" status="run" time="0" classname="FunctionTest" />
    <testcase name="InvcbrtDouble" status="run" time="0" classname="FunctionTest" />
    <testcase name="InvcbrtInteger" status="run" time="0" classname="FunctionTest" />
    <testcase name="SixthrootFloat" status="run" time="0" classname="FunctionTest" />
    <testcase name="SixthrootDouble" status="run" time="0" classname="FunctionTest" />
    <testcase name="SixthrootInteger" status="run" time="0" classname="FunctionTest" />
    <testcase name="InvsixthrootFloat" status="run" time="0" classname="FunctionTest" />
    <testcase name="InvsixthrootDouble" status="run" time="0" classname="FunctionTest" />
    <testcase name="InvsixthrootInteger" status="run" time="0" classname="FunctionTest" />
    <testcase name="Powers" status="run" time="0" classname="FunctionTest" />
    <testcase name="ErfInvFloat" status="run" time="0" classname="FunctionTest" />
    <testcase name="ErfInvDouble" status="run" time="0" classname="FunctionTest" />
    <testcase name="ErfAndErfInvAreInversesFloat" status="run" time="0" classname="FunctionTest" />
    <testcase name="ErfAndErfInvAreInversesDouble" status="run" time="0" classname="FunctionTest" />
  </testsuite>
  <testsuite name="GaussianOn1DLattice" tests="4" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="sumsCloseToOne" status="run" time="0" classname="GaussianOn1DLattice" />
    <testcase name="isCorrect" status="run" time="0" classname="GaussianOn1DLattice" />
    <testcase name="complementaryAmplitudesSumToZero" status="run" time="0" classname="GaussianOn1DLattice" />
    <testcase name="doesNotOverflowForLargeRange" status="run" time="0" classname="GaussianOn1DLattice" />
  </testsuite>
  <testsuite name="GaussTransformTest" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="isZeroUponConstruction" status="run" time="0" classname="GaussTransformTest" />
    <testcase name="isZeroAddingZeroAmplitudeGauss" status="run" time="0" classname="GaussTransformTest" />
    <testcase name="isZeroAfterSettingZero" status="run" time="0" classname="GaussTransformTest" />
    <testcase name="isZeroWhenOutsideRangeinX" status="run" time="0" classname="GaussTransformTest" />
    <testcase name="isZeroWhenOutsideRangeinY" status="run" time="0" classname="GaussTransformTest" />
    <testcase name="isZeroWhenOutsideRangeinZ" status="run" time="0" classname="GaussTransformTest" />
    <testcase name="complementaryGaussAddToZero" status="run" time="0" classname="GaussTransformTest" />
    <testcase name="centerGaussianInCubeHasExpectedValues" status="run" time="0" classname="GaussTransformTest" />
    <testcase name="view" status="run" time="0" classname="GaussTransformTest" />
  </testsuite>
  <testsuite name="DensityFittingForce" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="isZeroWhenMatchingDensity" status="run" time="0" classname="DensityFittingForce" />
    <testcase name="isZeroWhenMismatchingSameAllDirections" status="run" time="0" classname="DensityFittingForce" />
    <testcase name="pullsTowardsDerivative" status="run" time="0" classname="DensityFittingForce" />
  </testsuite>
  <testsuite name="InvertMatrixTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IdentityIsImpotent" status="run" time="0" classname="InvertMatrixTest" />
    <testcase name="ComputesInverse" status="run" time="0" classname="InvertMatrixTest" />
  </testsuite>
  <testsuite name="InvertBoxMatrixTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IdentityIsImpotent" status="run" time="0" classname="InvertBoxMatrixTest" />
    <testcase name="ComputesInverseInPlace" status="run" time="0" classname="InvertBoxMatrixTest" />
  </testsuite>
  <testsuite name="MatrixTest" tests="17" failures="0" disabled="0" errors="0" time="0">
    <testcase name="canSetFromArray" status="run" time="0" classname="MatrixTest" />
    <testcase name="canSetStaticallyFromList" status="run" time="0" classname="MatrixTest" />
    <testcase name="canConstructAndFill" status="run" time="0" classname="MatrixTest" />
    <testcase name="canSetValues" status="run" time="0" classname="MatrixTest" />
    <testcase name="canCopyAssign" status="run" time="0" classname="MatrixTest" />
    <testcase name="canSwap" status="run" time="0" classname="MatrixTest" />
    <testcase name="staticMultiDimArrayExtent" status="run" time="0" classname="MatrixTest" />
    <testcase name="determinantWorks" status="run" time="0" classname="MatrixTest" />
    <testcase name="noninvertableDeterminantIsZero" status="run" time="0" classname="MatrixTest" />
    <testcase name="determinantOfDiagonalMatrix" status="run" time="0" classname="MatrixTest" />
    <testcase name="traceWorks" status="run" time="0" classname="MatrixTest" />
    <testcase name="transposeWorks" status="run" time="0" classname="MatrixTest" />
    <testcase name="transposeOfSymmetricMatrix" status="run" time="0" classname="MatrixTest" />
    <testcase name="canCreateFromLegacyMatrix" status="run" time="0" classname="MatrixTest" />
    <testcase name="canFillLegacyMatrix" status="run" time="0" classname="MatrixTest" />
    <testcase name="IdentityMatrix" status="run" time="0" classname="MatrixTest" />
    <testcase name="MatrixVectorMultiplication" status="run" time="0" classname="MatrixTest" />
  </testsuite>
  <testsuite name="MultiDimArrayTest" tests="25" failures="0" disabled="0" errors="0" time="0">
    <testcase name="canConstructAndFillStatic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canConstructAndFillDynamic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canSetValuesInStatic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canSetValuesInDynamic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canMoveConstructStatic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canMoveConstructDynamic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canMoveAssignStatic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canMoveAssignDynamic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canCopyConstructStatic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canCopyConstructDynamic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canCopyAssignStatic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canCopyAssignDynamic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canSwapStatic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="canSwapDynamic" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="staticMultiDimArrayExtent" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="dynamicMultiDimArrayExtent" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="dynamicMultiDimArrayResizesToCorrectExtent" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="dynamicMultiDimArrayResizeAndSetValue" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="staticMultiDimArrayFromArray" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="conversionToView" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="conversionToConstView" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="viewBegin" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="viewEnd" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="constViewConstBegin" status="run" time="0" classname="MultiDimArrayTest" />
    <testcase name="constViewConstEnd" status="run" time="0" classname="MultiDimArrayTest" />
  </testsuite>
  <testsuite name="MultiDimArrayToMdSpanTest" tests="4" failures="0" disabled="0" errors="0" time="0">
    <testcase name="convertsToMdSpan" status="run" time="0" classname="MultiDimArrayToMdSpanTest" />
    <testcase name="constArrayToMdSpan" status="run" time="0" classname="MultiDimArrayToMdSpanTest" />
    <testcase name="nonConstArrayToConstMdSpan" status="run" time="0" classname="MultiDimArrayToMdSpanTest" />
    <testcase name="implicitConversionToMdSpan" status="run" time="0" classname="MultiDimArrayToMdSpanTest" />
  </testsuite>
  <testsuite name="NelderMeadSimplexTest" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="BestVertex" status="run" time="0" classname="NelderMeadSimplexTest" />
    <testcase name="WorstVertex" status="run" time="0" classname="NelderMeadSimplexTest" />
    <testcase name="SecondWorstValue" status="run" time="0" classname="NelderMeadSimplexTest" />
    <testcase name="ReflectionPoint" status="run" time="0" classname="NelderMeadSimplexTest" />
    <testcase name="EvaluateExpansionPoint" status="run" time="0" classname="NelderMeadSimplexTest" />
    <testcase name="EvaluateContractionPoint" status="run" time="0" classname="NelderMeadSimplexTest" />
    <testcase name="SwapOutWorst" status="run" time="0" classname="NelderMeadSimplexTest" />
    <testcase name="ShrinkSimplexPointsExceptBest" status="run" time="0" classname="NelderMeadSimplexTest" />
    <testcase name="OrientedLength" status="run" time="0" classname="NelderMeadSimplexTest" />
  </testsuite>
  <testsuite name="NelderMead" tests="2" failures="0" disabled="0" errors="0" time="0.013">
    <testcase name="Optimizes2DFunctionCorrectly" status="run" time="0.013" classname="NelderMead" />
    <testcase name="Optimizes3DFunctorCorrectly" status="run" time="0" classname="NelderMead" />
  </testsuite>
  <testsuite name="PaddedVectorTest/0" tests="11" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DefaultConstructorWorks" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="ResizeWorks" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="ReserveWorks" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="MoveConstructorWorks" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="MoveAssignmentWorks" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="CanCopyAssign" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="CanMoveAssign" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
    <testcase name="CanSwap" type_param="std::allocator&lt;int&gt;" status="run" time="0" classname="PaddedVectorTest/0" />
  </testsuite>
  <testsuite name="PaddedVectorTest/1" tests="11" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DefaultConstructorWorks" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="ResizeWorks" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="ReserveWorks" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="MoveConstructorWorks" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="MoveAssignmentWorks" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="CanCopyAssign" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="CanMoveAssign" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
    <testcase name="CanSwap" type_param="std::allocator&lt;float&gt;" status="run" time="0" classname="PaddedVectorTest/1" />
  </testsuite>
  <testsuite name="PaddedVectorTest/2" tests="11" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DefaultConstructorWorks" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="ResizeWorks" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="ReserveWorks" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="MoveConstructorWorks" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="MoveAssignmentWorks" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="CanCopyAssign" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="CanMoveAssign" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
    <testcase name="CanSwap" type_param="std::allocator&lt;double&gt;" status="run" time="0" classname="PaddedVectorTest/2" />
  </testsuite>
  <testsuite name="PaddedVectorTest/3" tests="11" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DefaultConstructorWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="ResizeWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="ReserveWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="MoveConstructorWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="MoveAssignmentWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="CanCopyAssign" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="CanMoveAssign" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
    <testcase name="CanSwap" type_param="std::allocator&lt;gmx::BasicVector&lt;float&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/3" />
  </testsuite>
  <testsuite name="PaddedVectorTest/4" tests="11" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DefaultConstructorWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="ResizeWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="ReserveWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="MoveConstructorWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="MoveAssignmentWorks" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="CanCopyAssign" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="CanMoveAssign" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
    <testcase name="CanSwap" type_param="std::allocator&lt;gmx::BasicVector&lt;double&gt; &gt;" status="run" time="0" classname="PaddedVectorTest/4" />
  </testsuite>
  <testsuite name="PaddedVectorTest/5" tests="11" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="DefaultConstructorWorks" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
    <testcase name="ResizeWorks" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0.001" classname="PaddedVectorTest/5" />
    <testcase name="ReserveWorks" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
    <testcase name="MoveConstructorWorks" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
    <testcase name="MoveAssignmentWorks" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
    <testcase name="CanCopyAssign" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
    <testcase name="CanMoveAssign" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
    <testcase name="CanSwap" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/5" />
  </testsuite>
  <testsuite name="PaddedVectorTest/6" tests="11" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DefaultConstructorWorks" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="ResizeWorks" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="ReserveWorks" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="MoveConstructorWorks" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="MoveAssignmentWorks" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="CanCopyAssign" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="CanMoveAssign" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
    <testcase name="CanSwap" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/6" />
  </testsuite>
  <testsuite name="PaddedVectorTest/7" tests="11" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DefaultConstructorWorks" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="ResizeWorks" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="ReserveWorks" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="MoveConstructorWorks" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="MoveAssignmentWorks" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="CanCopyAssign" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="CanMoveAssign" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
    <testcase name="CanSwap" type_param="gmx::Allocator&lt;double, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/7" />
  </testsuite>
  <testsuite name="PaddedVectorTest/8" tests="11" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DefaultConstructorWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="ResizeWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="ReserveWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="MoveConstructorWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="MoveAssignmentWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="CanCopyAssign" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="CanMoveAssign" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
    <testcase name="CanSwap" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/8" />
  </testsuite>
  <testsuite name="PaddedVectorTest/9" tests="11" failures="0" disabled="0" errors="0" time="0">
    <testcase name="DefaultConstructorWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="ResizeWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="ReserveWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="ReserveWorksTheSameAsNoReserve" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="MoveConstructorWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="MoveConstructorWithAllocatorWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="MoveAssignmentWorks" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="ArrayRefConversionsAreIdentical" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="CanCopyAssign" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="CanMoveAssign" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
    <testcase name="CanSwap" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;double&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="PaddedVectorTest/9" />
  </testsuite>
  <testsuite name="RVecTest" tests="37" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CanBeStoredInVector" status="run" time="0" classname="RVecTest" />
    <testcase name="ConvertsImplicitlyFrom_rvec" status="run" time="0" classname="RVecTest" />
    <testcase name="ConvertsImplicitlyTo_rvec" status="run" time="0" classname="RVecTest" />
    <testcase name="WorksAsMutable_rvec" status="run" time="0" classname="RVecTest" />
    <testcase name="WorksAs_rvec_Array" status="run" time="0" classname="RVecTest" />
    <testcase name="CanAddRVecToRvec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanAddAssignRVecToRvec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanSubtractRVecFromRvec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanSubtractAssignRVecFromRvec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanDotProductRVecByRvec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanCrossProductRVecByRvec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanDivideRVecInplace" status="run" time="0" classname="RVecTest" />
    <testcase name="CanScaleRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanDivideRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanDoUnitvFromRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanSqLengthOfRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanLengthOfRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanCastToRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanCastToDVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanLeftScalarMultiply" status="run" time="0" classname="RVecTest" />
    <testcase name="CanRightScalarMultiply" status="run" time="0" classname="RVecTest" />
    <testcase name="CanGetUnitvFromRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanGetSqLengthOfRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanGetLengthOfRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanDoCrossProductOfRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanDoDotProductOfRVec" status="run" time="0" classname="RVecTest" />
    <testcase name="CanScaleByVector" status="run" time="0" classname="RVecTest" />
    <testcase name="asIVec" status="run" time="0" classname="RVecTest" />
    <testcase name="elementWiseMin" status="run" time="0" classname="RVecTest" />
    <testcase name="elementWiseMax" status="run" time="0" classname="RVecTest" />
    <testcase name="WorksAs_dvec_Reference" status="run" time="0" classname="RVecTest" />
    <testcase name="WorksAs_ivec_Reference" status="run" time="0" classname="RVecTest" />
    <testcase name="WorksAs_rvec_Reference" status="run" time="0" classname="RVecTest" />
    <testcase name="CopyConstructorWorks" status="run" time="0" classname="RVecTest" />
    <testcase name="CopyAssignmentWorks" status="run" time="0" classname="RVecTest" />
    <testcase name="MoveConstructorWorks" status="run" time="0" classname="RVecTest" />
    <testcase name="MoveAssignmentWorks" status="run" time="0" classname="RVecTest" />
  </testsuite>
</testsuites>
